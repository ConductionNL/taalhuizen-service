version: '3.5'

x-cache:
  &cache
  cache_from:
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-php
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nginx
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-varnish
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-phpdoc
    - ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-sphinx

services:
  php:
    &php
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-php:${APP_ENV}
    build:
      context: ./api
      target: api_platform_php
      <<: *cache
    depends_on:
      - db
    volumes:
      - ./api:/srv/api:rw,cached
      - ./nlx-setup:/cert:rw,cached
      #- ./nlx-setup:/Users/<your-username>/nlx-setup:rw,cached
      # If you develop on Linux, uncomment the following line to use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
    environment:
      - CONTAINER_REGISTRY_BASE=${CONTAINER_REGISTRY_BASE}
      - CONTAINER_PROJECT_NAME=${CONTAINER_PROJECT_NAME}
      #- DATABASE_URL=postgres://api-platform:!ChangeMe!@db/api?serverVersion=10.1
      - DATABASE_URL=mysql://api-platform:!ChangeMe!@db/api?serverVersion=10.1
      - APP_ENV=${APP_ENV}
      - APP_CONTAINER=${APP_CONTAINER}
      - APP_DEBUG=${APP_DEBUG}
      - APP_CACHE=${APP_CACHE}
      - APP_VERSION=${APP_VERSION}
      - APP_NAME=${APP_NAME}
      - APP_NAME_TECHNICAL=${APP_NAME_TECHNICAL}
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_SUBDOMAIN=${APP_SUBDOMAIN}
      - APP_SUBPATH=${APP_SUBPATH}
      - APP_SUBPATH_ROUTING=${APP_SUBPATH_ROUTING}
      - APP_DEMO=${APP_DEMO}
      - APP_REPRO=${APP_REPRO}
      - APP_DESCRIPTION=${APP_DESCRIPTION}
      - APP_LOGO=${APP_LOGO}
      - APP_HOME=${APP_HOME}
      - APP_COMMONGROUND_ID=${APP_COMMONGROUND_ID}
      - APP_APPLICATION_KEY=${APP_APPLICATION_KEY}
      - APP_BUILD_ALL_FIXTURES=${APP_BUILD_ALL_FIXTURES}
      - APP_WEB=${APP_WEB}
      - BADGES=${BADGES}
      - APP_BUILD=${APP_BUILD}
      - APP_INTERNAL=${APP_INTERNAL}
      - APP_URL=${APP_URL}
      - APP_CHART=${APP_CHART}
      - HELM_REPOSITORY=${HELM_REPOSITORY}
      - ARTIFACTHUB_ID=${ARTIFACTHUB_ID}
      - ARTIFACTHUB_USER=${ARTIFACTHUB_USER}
      - OWNER_NAME=${OWNER_NAME}
      - OWNER_URL=${OWNER_URL}
      - APP_SESSION_DURATION=${APP_SESSION_DURATION}
      - LICENCE_NAME=${LICENCE_NAME}
      - TRUSTED_PROXIES=${TRUSTED_PROXIES}
      - TRUSTED_HOSTS=${TRUSTED_HOSTS}
      - AUTH_ENABLED=${AUTH_ENABLED}
      - AUDITTRAIL_ENABLED=${AUDITTRAIL_ENABLED}
      - NOTIFICATION_ENABLED=${NOTIFICATION_ENABLED}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PRIVATE_KEY=${PRIVATE_KEY}
      - PUBLIC_KEY=${PUBLIC_KEY}
    ports:
      - "82:80"

  api:
    &nginx
    image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nginx:${APP_ENV}
    build:
      context: ./api
      target: api_platform_nginx
      dockerfile: Dockerfile-nginx
      <<: *cache
    depends_on:
      - php
    # Comment out this volume in production if you do not want to use nlx
    #  - nlx-outway
    # If you us this docker-compose file for production enviroments and want to us nlx-inway uncomment the following lins
    #  - nlx-inway
    # Comment out this volume in production
    volumes:
      - ./api/public:/srv/api/public:ro
    ports:
      - "80:80"
    environment:
      - NGINX_HOST=php

        # nlx-outway:
        #   image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nlx-outway:${APP_ENV}
        #   build:
        #     context: ./api
        #     target: api-nlx-outway
        #   depends_on:
        #     - nlx-postgres
        #   volumes:
        #     - ./api/nlx-setup:/certs:rw,cached
        #   environment:
        #     - DIRECTORY_INSPECTION_ADDRESS=directory-inspection-api.demo.nlx.io:443 
        #     - TLS_NLX_ROOT_CERT=/certs/root.crt 
        #     - TLS_ORG_CERT=/certs/org.crt 
        #     - TLS_ORG_KEY=/certs/org.key 
        #     - POSTGRES_DSN=postgres://postgres:postgres@nlx-postgres/txlog-db?sslmode=disable&connect_timeout=10
        #   networks:
        #     - nlx

        # Uncomment the follwoign lines if you want to deploy trough a docker-compose chart and wish to use an nlx inway
        # 
        # nlx-inway:
        #   image: ${CONTAINER_REGISTRY_BASE}/${CONTAINER_PROJECT_NAME}-nlx-inway:${APP_ENV}
        #   build:
        #     context: ./api
        #     target: api-nlx-inway
        #   depends_on:
        #     - nlx-postgres
        #   volumes:
        #     - ./api/nlx-setup:/certs:rw,cached
        #   environment:
        #     - DIRECTORY_REGISTRATION_ADDRESS=directory-registration-api.demo.nlx.io:443 
        #     - SELF_ADDRESS=pc.zaakonline.nl:443 
        #     - SERVICE_CONFIG=/service-config.toml 
        #     - TLS_NLX_ROOT_CERT=/certs/root.crt 
        #     - TLS_ORG_CERT=/certs/org.crt 
        #     - TLS_ORG_KEY=/certs/org.key 
        #     - POSTGRES_DSN=postgres://postgres:postgres@nlx-postgres/txlog-db?sslmode=disable&connect_timeout=10
        #   networks:
        #     -  nlx

        # Comment out this service in production if you do not want to use nlx
        # nlx-postgres:
        #   image: postgres:12
        #   environment:
        #     POSTGRES_PASSWORD: postgres
        #     POSTGRES_DB: txlog-db
        #     POSTGRES_USER: postgres
        #   volumes:
        #     - nlx-data-2:/var/lib/postgresql/data:rw
        #   networks:
        #     - nlx

        # Comment out this service in production if you do not want to use nlx
        #txlog-db:
        #  image: nlxio/txlog-db
        #  depends_on:
        #    - nlx-postgres
        #    - nlx-outway
        # If you us this docker-compose file for production enviroments and want to us nlx-inway uncomment the following lins
        #  - nlx-inway
        #  environment:
        #    PGHOST: nlx-postgres
        #    PGUSER: postgres
        #    PGPASSWORD: postgres
        #    PGDATABASE: txlog-db
        #  command: /usr/local/bin/upgrade-db.sh
        #  networks:
        #    - nlx

        #db:
        #  image: postgres:10-alpine
        #  environment:
        #    - POSTGRES_DB=api
      #    - POSTGRES_USER=api-platform
      # You should definitely change the password in production
  #    - POSTGRES_PASSWORD=!ChangeMe!
  #  volumes:
  #    - db-data:/var/lib/postgresql/data:rw

  # From: https://hub.docker.com/r/phpdoc/phpdoc/
  phpDocumentor:
    image: phpdoc/phpdoc

  helmPackage:
    image: alpine/helm:3.2.1
    volumes:
      - ./api/helm:/apps
    command: package /apps

  helmIndex:
    depends_on:
      - helmPackage
    image: alpine/helm:3.2.1
    volumes:
      - ./api/helm:/apps
    command: repo index /apps

  redis:
    image: redis:4-alpine

  # From: tsgkadot/docker-doxygen    
  sphinx:
    image: tsgkadot/docker-doxygen

  db:
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=example
      - MYSQL_DATABASE=api
      - MYSQL_USER=api-platform
      - MYSQL_PASSWORD=!ChangeMe!
    volumes:
      - db-mysql:/var/lib/mysql:rw
    ports:
      - "3366:3306"

networks:
  nlx:
    name: nlx

volumes:
  db-data: {}
  db-mysql: {}
  nlx-data-2: {}
