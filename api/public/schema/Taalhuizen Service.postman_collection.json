{
	"info": {
		"_postman_id": "ae290321-7040-47ca-9116-60c8d032f4d2",
		"name": "Taalhuizen Service",
		"description": "    API Details\r\n    - Component: EAV Component\r\n    - Reference: eav\r\n    - Enviroment: dev\r\n    - Version: V1.0\r\n    - Repository: [online](https://github.com/ConductionNL/EAV-component) / [zip](https://github.com/ConductionNL/EAV-component/archive/master.zip)\r\n    - Docker Image: [online](https://hub.docker.com/repository/docker/conduction/eav-php) \r\n    - Datamodel: [postman](schema/eav.postman_collection.json) / [oas](schema/openapi.yaml) / [pdf](schema/datamodel.pdf) / [modelio (zip)](schema/Datamodel_Modelio.zip) \r\n    \r\n    Naast deze JSON rest API is er ook een [graphql](/graphql) interface beschikbaar.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GraphQL",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Logs in the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"user_login_token\", jsonData.data.loginUser.user.token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation loginUser($input: loginUserInput!){\r\n    loginUser(input: $input) {\r\n        user{\r\n            id,\r\n            token\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"username\": \"main+testadmin@conduction.nl\",\r\n        \"password\": \"Test1234\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the Provider resources without a token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should contain an error as the token is invalidated\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query providers {\r\n    providers(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                email\r\n                phoneNumber\r\n                address\r\n                type\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieves the Provider resources with an invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should contain an error as the token is invalidated\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.caOC-EYadUbNcyZIfUKR-uJW-a3c-ZrY9CrpB4gvWBqevk_wsiX7R8_iLpqAu3DR9giEgJ8GrzuCoXtbGzgwzwb3DMzQMWuPJLjYnQn9frCcg6oXLniO5PRPrwyzvyhF5Q5eaX9vH1vET5IO-_T4X47Tg266j8vRiYRbpWKDhkPjluf5f7DRVWYKVBChPUT2CsFFFI84HkfATD_LFTjjOe92zpZfqLj0FsnKuRUJT0EAO6ALgpsQA4TlIQcVCLs_wSu1K1Rckobaht1mrb_UwuS0s1up6TN_k-EYNk9pWBy5dftrrdjqQf80mGujyviIIBkXOwUQ-sdAS7Rgga6VYCB-p5HySoh4BAUjGC4fT7qFVg_JgbpdHkyk8jBZNdzWsrpjw4n85kjSHl0crpIYXZ5zSETfT-HyIHyrgkRmc5JX9uzvcdX32L16AXNwUGTo-h-Bt1fjphGrDHaSQKf63WVEY5-COHanCIPFizSs8PSSDDudsd4h8voI5VidAJr73biY__PiJ3E0XAUoPykvTPT9OTd85KfiTbu64dVGf7RyVkGRncs5Bxlzmv8oHskvE4NCASwZ99D9VfqrEheStZPC8wH6aEf4SZlRUUJJ64SMCJkfgP_4fRL2CHlvrVkfM8zUy7JPr8sFpWTI7BkMt7S_NI1MQdHdqiVmOv-XCaA",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query providers {\r\n    providers(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                email\r\n                phoneNumber\r\n                address\r\n                type\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "provider",
					"item": [
						{
							"name": "Retrieves the Provider resources.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query providers {\r\n    providers(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                email\r\n                phoneNumber\r\n                address\r\n                type\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a Provider resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"provider\", jsonData.data.createProvider.provider.id.split('/')[2]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createProvider($input: createProviderInput!) {\r\n    createProvider(input: $input) {\r\n        provider {\r\n            id\r\n            name\r\n            address\r\n            email\r\n            phoneNumber\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n    \"name\": \"test2345 refactor\",\r\n    \"email\": \"test3\",\r\n    \"phoneNumber\":\"test4\",\r\n     \"address\": {\r\n            \"street\": \"test1\",\r\n            \"houseNumber\": \"11\",\r\n            \"houseNumberSuffix\": \"a\",\r\n            \"postalCode\":\"1231NR\",\r\n            \"locality\": \"loosdrecht\"\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updates a Provider resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateProvider($input: updateProviderInput!) {\r\n    updateProvider(input: $input) {\r\n        provider {\r\n            id\r\n            address\r\n            name\r\n            email\r\n            phoneNumber\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{provider}}\",\r\n        \"name\": \"Aanbieder update2345 refactor\",\r\n        \"email\": \"test test email\",\r\n        \"phoneNumber\": \"test phoneNumber\",\r\n        \"address\": {\r\n            \"street\": \"vuntudlaan\",\r\n            \"houseNumber\": \"777\",\r\n            \"houseNumberSuffix\": \"a\",\r\n            \"postalCode\":\"1231NR\",\r\n            \"locality\": \"loosdrecht\"\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieves a Provider resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query provider($providerId: ID!) {\r\n    provider(id: $providerId) {\r\n        id\r\n        name\r\n        email\r\n        phoneNumber\r\n        address\r\n        type\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\":\"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the User Roles of a provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query userRolesByProviders($providerId: String!) {\r\n    userRolesByProviders(first: 10, providerId: $providerId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\":\"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "languageHouse",
					"item": [
						{
							"name": "Retrieves the LanguageHouse resources.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query languageHouses {\r\n    languageHouses(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                email\r\n                phoneNumber\r\n                address\r\n                type\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a LanguageHouse resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"language_house\", jsonData.data.createLanguageHouse.languageHouse.id.split(\"/\")[2]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createLanguageHouse($input: createLanguageHouseInput!) {\r\n    createLanguageHouse(input: $input) {\r\n        languageHouse {\r\n            id\r\n            name\r\n            address\r\n            email\r\n            phoneNumber\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n    \"name\": \"test23456 refactor\",\r\n    \"email\": \"test3\",\r\n    \"phoneNumber\":\"test4\",\r\n     \"address\": {\r\n            \"street\": \"test1\",\r\n            \"houseNumber\": \"11\",\r\n            \"houseNumberSuffix\": \"a\",\r\n            \"postalCode\":\"1231NR\",\r\n            \"locality\": \"loosdrecht\"\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updates a LanguageHouse resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateLanguageHouse($input: updateLanguageHouseInput!) {\r\n    updateLanguageHouse(input: $input) {\r\n        languageHouse {\r\n            id\r\n            name\r\n            email\r\n            phoneNumber\r\n            type\r\n            address\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{language_house}}\",\r\n        \"name\": \"Taalhuis update2345 refactor\",\r\n        \"email\": \"test test email\",\r\n        \"phoneNumber\": \"test phoneNumber\",\r\n        \"address\": {\r\n            \"street\": \"vuntudlaan\",\r\n            \"houseNumber\": \"777\",\r\n            \"houseNumberSuffix\": \"a\",\r\n            \"postalCode\":\"1231NR\",\r\n            \"locality\": \"loosdrecht\"\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a LanguageHouse resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query languageHouse($languageHouseId: ID!) {\r\n    languageHouse(id: $languageHouseId) {\r\n        id\r\n        name\r\n        email\r\n        phoneNumber\r\n        address\r\n    }\r\n}",
										"variables": "{\r\n    \"languageHouseId\": \"{{language_house}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieves a UserRoleByLanguageHouse resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query userRolesByLanguageHouses($languageHouseId: String!) {\r\n    userRolesByLanguageHouses(first: 10, languageHouseId: $languageHouseId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"languageHouseId\": \"{{language_house}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "employee",
					"item": [
						{
							"name": "Retrieves the Employee resources of a provider.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query employees($providerId: String) {\r\n    employees(providerId: $providerId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges{\r\n            node {\r\n            id,\r\n            givenName,\r\n            familyName,\r\n            email\r\n            gender\r\n            dateOfBirth\r\n            address\r\n            contactPreference\r\n            targetGroupPreferences\r\n            volunteeringPreference\r\n            userId,\r\n            userGroupIds\r\n            currentEducation\r\n            currentEducationYes\r\n            currentEducationNoButDidFollow\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\": \"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a Taalhuis Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"language_house_employee\", jsonData.data.createEmployee.employee.id.split(\"/\")[2]);\r",
											"    pm.environment.set(\"language_house_employee_user_id\", jsonData.data.createEmployee.employee.userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createEmployee($input: createEmployeeInput!){\r\n    createEmployee(input: $input) {\r\n        employee{\r\n            id\r\n            givenName\r\n            additionalName\r\n            familyName\r\n            email\r\n            telephone\r\n            dateCreated\r\n            dateModified\r\n            userRoles\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"languageHouseId\":\"{{language_house}}\",\r\n         \"userGroupIds\": [\r\n            \"00848014-63f6-4350-b125-25c68b8631d4\"\r\n        ],\r\n        \"givenName\": \"Robert\",\r\n        \"additionalName\":\"\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"email\": \"main+{{language_house}}@conduction.nl\",\r\n        \"telephone\": \"0612345678\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a Aanbieder Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"employee\", jsonData.data.createEmployee.employee.id.split(\"/\")[2]);\r",
											"    pm.environment.set(\"employee_user_id\", jsonData.data.createEmployee.employee.userId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createEmployee($input: createEmployeeInput!){\r\n    createEmployee(input: $input) {\r\n        employee{\r\n            id\r\n            userId\r\n            dateCreated\r\n            dateModified\r\n            userRoles\r\n            givenName\r\n            additionalName\r\n            familyName\r\n            telephone\r\n            availability\r\n            availabilityNotes\r\n            email\r\n            gender\r\n            dateOfBirth\r\n            address\r\n            contactTelephone\r\n            contactPreference\r\n            contactPreferenceOther\r\n            targetGroupPreferences\r\n            volunteeringPreference\r\n            gotHereVia\r\n            hasExperienceWithTargetGroup\r\n            experienceWithTargetGroupYesReason\r\n            currentEducation\r\n            currentEducationYes\r\n            currentEducationNoButDidFollow\r\n            doesCurrentlyFollowCourse\r\n            currentlyFollowingCourseName\r\n            currentlyFollowingCourseInstitute\r\n            currentlyFollowingCourseTeacherProfessionalism\r\n            currentlyFollowingCourseCourseProfessionalism\r\n            doesCurrentlyFollowingCourseProvideCertificate\r\n            otherRelevantCertificates\r\n            isVOGChecked\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"givenName\": \"Robert\",\r\n        \"additionalName\":\"\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"telephone\":\"0612345678\",\r\n        \"availability\":{\r\n            \"mon\":\"true\",\r\n            \"tue\":\"false\",\r\n            \"wed\":\"false\",\r\n            \"thur\":\"true\",\r\n            \"sat\":\"true\",\r\n            \"sun\":\"false\"\r\n        },\r\n        \"availabilityNotes\":\"test\",\r\n        \"email\": \"main+bisc+{{provider}}@conduction.nl\",\r\n        \"userGroupIds\": [\"5ef493ac-9c96-45a7-a8be-07fa6cc4301d\"],\r\n        \"gender\": \"X\",\r\n        \"dateOfBirth\": \"1-1-2000\",\r\n        \"address\": {\r\n            \"street\": \"langeweg\",\r\n            \"houseNumber\": \"5\",\r\n            \"locality\": \"Schubbekutteveen\",\r\n            \"postcode\": \"9999ZZ\"\r\n        },\r\n        \"contactTelephone\": \"EMAIL\",\r\n        \"contactPreference\": \"EMAIL\",\r\n         \"contactPreferenceOther\": \"EMAIL\",\r\n        \"targetGroupPreferences\": [\"NT1\"],\r\n        \"volunteeringPreference\": \"test\",\r\n        \"gotHereVia\": \"conduction\",\r\n        \"hasExperienceWithTargetGroup\": true,\r\n        \"experienceWithTargetGroupYesReason\": true,\r\n        \"currentEducation\": \"NO_BUT_DID_EARLIER\",\r\n        \"currentEducationYes\": {\r\n            \"dateSince\": \"2020-05-10\",\r\n            \"name\": \"something spiffy\",\r\n            \"doesProvideCertificate\": true\r\n        },\r\n        \"currentEducationNoButDidFollow\": {\r\n            \"dateUntil\": \"2020-05-10\",\r\n            \"name\": \"something spiffy\",\r\n            \"gotCertificate\": true,\r\n            \"level\": \"5\"\r\n        },\r\n        \"doesCurrentlyFollowCourse\": true,\r\n        \"currentlyFollowingCourseName\": \"fierljeppen\",\r\n        \"currentlyFollowingCourseInstitute\": \"Friese Academie van Fierljeppers\",\r\n        \"currentlyFollowingCourseTeacherProfessionalism\": \"VOLUNTEER\",\r\n        \"currentlyFollowingCourseCourseProfessionalism\": \"VOLUNTEER\",\r\n        \"doesCurrentlyFollowingCourseProvideCertificate\": true,\r\n        \"otherRelevantCertificates\": \"MSc of Computer Science\",\r\n        \"isVOGChecked\": true,\r\n        \"providerId\": \"{{provider}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a Bisc Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"bisc_employee\", jsonData.data.createEmployee.employee.id.split(\"/\")[2]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createEmployee($input: createEmployeeInput!){\r\n    createEmployee(input: $input) {\r\n        employee{\r\n            id\r\n            givenName\r\n            additionalName\r\n            familyName\r\n            email\r\n            telephone\r\n            dateCreated\r\n            dateModified\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"givenName\": \"Robert\",\r\n        \"additionalName\":\"\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"email\": \"main+bisc+{{language_house}}@conduction.nl\",\r\n        \"telephone\": \"0612345678\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateEmployee($input: updateEmployeeInput!){\r\n    updateEmployee(input: $input) {\r\n        employee{\r\n            id,\r\n            givenName,\r\n            familyName,\r\n            userId,\r\n            providerId,\r\n            languageHouseId,\r\n            gotHereVia\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{employee}}\",\r\n        \"userId\":\"{{employee_user_id}}\",\r\n        \"givenName\": \"Jan\",\r\n        \"familyName\": \"de Dwerg\",\r\n        \"email\": \"test2@conduction.nl\",\r\n        \"userGroupIds\": [\"5ef493ac-9c96-45a7-a8be-07fa6cc4301d\"],\r\n        \"gender\": \"X\",\r\n        \"dateOfBirth\": \"1-1-2000\",\r\n        \"address\": {\r\n            \"street\": \"langeweg\",\r\n            \"houseNumber\": \"5\",\r\n            \"locality\": \"Schubbekutteveen\",\r\n            \"postcode\": \"9999ZZ\"\r\n        },\r\n        \"contactPreference\": \"EMAIL\",\r\n        \"targetGroupPreferences\": [\"NT1\"],\r\n        \"volunteeringPreference\": \"test\",\r\n        \"gotHereVia\": \"conduction\",\r\n        \"hasExperienceWithTargetGroup\": true,\r\n        \"experienceWithTargetGroupYesReason\": true,\r\n        \"currentEducation\": \"NO_BUT_DID_EARLIER\",\r\n        \"currentEducationNoButDidFollow\": {\r\n            \"dateUntil\": \"2020-05-10\",\r\n            \"name\": \"something spiffy\",\r\n            \"gotCertificate\": true,\r\n            \"level\": \"5\"\r\n        },\r\n        \"doesCurrentlyFollowCourse\": true,\r\n        \"currentlyFollowingCourseName\": \"fierljeppen\",\r\n        \"currentlyFollowingCourseInstitute\": \"Friese Academie van Fierljeppers\",\r\n        \"currentlyFollowingCourseTeacherProfessionalism\": \"VOLUNTEER\",\r\n        \"currentlyFollowingCourseCourseProfessionalism\": \"VOLUNTEER\",\r\n        \"doesCurrentlyFollowingCourseProvideCertificate\": true,\r\n        \"otherRelevantCertificates\": \"MSc of Computer Science\",\r\n        \"isVOGChecked\": true,\r\n        \"providerId\": \"{{provider}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a LanguageHouse Employee resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateEmployee($input: updateEmployeeInput!){\r\n    updateEmployee(input: $input) {\r\n        employee{\r\n            id\r\n            givenName\r\n            additionalName\r\n            familyName\r\n            email\r\n            telephone\r\n            dateCreated\r\n            dateModified\r\n            userRoles\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{language_house_employee}}\",\r\n        \"userId\":\"{{language_house_employee_user_id}}\",\r\n        \"givenName\": \"Robert\",\r\n        \"additionalName\":\"\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"email\": \"main+{{language_house}}@conduction.nl\",\r\n        \"telephone\": \"0612345678\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query employee($employeeId: ID!) {\r\n    employee(id: $employeeId) {\r\n        id\r\n        givenName\r\n        familyName\r\n        userId\r\n        providerId\r\n        languageHouseId\r\n        gotHereVia\r\n    }\r\n}",
										"variables": "{\r\n        \"employeeId\": \"{{employee}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "group",
					"item": [
						{
							"name": "Retrieves the Group resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query groups($aanbiederId: String!) {\r\n    groups(first: 10, aanbiederId: $aanbiederId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"aanbiederId\": \"/providers/3f26bf48-cfe6-4a2c-bafd-70f89b70efa7\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a Group resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"group\", jsonData.data.createGroup.group.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createGroup($input: createGroupInput!) {\r\n    createGroup(input: $input) {\r\n        group {\r\n            id\r\n            aanbiederId\r\n            groupId\r\n            name\r\n            typeCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            availability\r\n            availabilityNotes\r\n            generalLocation\r\n            generalParticipantsMin\r\n            generalParticipantsMax\r\n            generalEvaluation\r\n            aanbiederEmployeeIds\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"aanbiederId\":\"{{provider}}\",\r\n        \"name\": \"testGroup\",\r\n        \"typeCourse\": \"OTHER\",\r\n        \"outComesGoal\":\"test\",\r\n        \"outComesTopic\":\"OTHER\",\r\n        \"outComesTopicOther\":\"test\",\r\n        \"outComesApplication\":\"OTHER\",\r\n        \"outComesApplicationOther\":\"test\",\r\n        \"outComesLevel\":\"OTHER\",\r\n        \"outComesLevelOther\":\"test\",\r\n        \"detailsIsFormal\": false,\r\n        \"detailsTotalClassHours\": 10,\r\n        \"detailsCertificateWillBeAwarded\": false,\r\n        \"detailsStartDate\":\"2021-05-30\",\r\n        \"detailsEndDate\":\"2021-06-30\",\r\n        \"availability\": null,\r\n        \"availabilityNotes\":null,\r\n        \"generalLocation\":\"teststraat 21\",\r\n        \"generalParticipantsMin\": 10,\r\n        \"generalParticipantsMax\": 20,\r\n        \"generalEvaluation\":\"test\",\r\n        \"aanbiederEmployeeIds\":[\r\n            \"/employees/70933304-5a0f-43aa-9745-e96db398a0e0\"\r\n        ]\r\n     }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a Group resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateGroup($input: updateGroupInput!) {\r\n    updateGroup(input: $input) {\r\n        group {\r\n            id\r\n            aanbiederId\r\n            name\r\n            typeCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            availability\r\n            availabilityNotes\r\n            generalLocation\r\n            generalParticipantsMin\r\n            generalParticipantsMax\r\n            generalEvaluation\r\n            aanbiederEmployeeIds\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{group}}\",\r\n        \"aanbiederId\": \"{{provider}}\",\r\n        \"name\": \"changeEmployeeGroup\",\r\n        \"typeCourse\": \"OTHER\",\r\n        \"outComesGoal\": \"test2\",\r\n        \"outComesTopic\": \"OTHER\",\r\n        \"outComesTopicOther\": \"test\",\r\n        \"outComesApplication\": \"OTHER\",\r\n        \"outComesApplicationOther\": \"test\",\r\n        \"outComesLevel\": \"OTHER\",\r\n        \"outComesLevelOther\": \"test\",\r\n        \"detailsIsFormal\": \"abc\",\r\n        \"detailsTotalClassHours\": 10,\r\n        \"detailsCertificateWillBeAwarded\": false,\r\n        \"detailsStartDate\": \"2021-04-30T00:00:00+00:00\",\r\n        \"detailsEndDate\": \"2021-05-10T00:00:00+00:00\",\r\n        \"availability\": [],\r\n        \"availabilityNotes\": null,\r\n        \"generalLocation\": \"teststraat 21\",\r\n        \"generalParticipantsMin\": null,\r\n        \"generalParticipantsMax\": null,\r\n        \"generalEvaluation\": \"test\",\r\n        \"aanbiederEmployeeIds\": [\r\n            \"/employees/70933304-5a0f-43aa-9745-e96db398a0e0\"\r\n        ]\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieves a Group resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query group($groupId: ID!) {\r\n    group(id: $groupId) {\r\n        id\r\n        aanbiederId\r\n        name\r\n        typeCourse\r\n        outComesGoal\r\n        outComesTopic\r\n        outComesTopicOther\r\n        outComesApplication\r\n        outComesApplicationOther\r\n        outComesLevel\r\n        outComesLevelOther\r\n        detailsIsFormal\r\n        detailsTotalClassHours\r\n        detailsCertificateWillBeAwarded\r\n        detailsStartDate\r\n        detailsEndDate\r\n        availability\r\n        availabilityNotes\r\n        generalLocation\r\n        generalParticipantsMin\r\n        generalParticipantsMax\r\n        generalEvaluation\r\n        aanbiederEmployeeIds\r\n    }\r\n}",
										"variables": "{\r\n    \"groupId\":\"{{group}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieves the active group resources of a provider ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query activeGroups($aanbiederId: String!){\r\n    activeGroups(aanbiederId: $aanbiederId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                aanbiederId\r\n                groupId\r\n                name\r\n                typeCourse\r\n                outComesGoal\r\n                outComesTopic\r\n                outComesTopicOther\r\n                outComesApplication\r\n                outComesApplicationOther\r\n                outComesLevel\r\n                outComesLevelOther\r\n                detailsIsFormal\r\n                detailsTotalClassHours\r\n                detailsCertificateWillBeAwarded\r\n                detailsStartDate\r\n                detailsEndDate\r\n                availability\r\n                availabilityNotes\r\n                generalLocation\r\n                generalParticipantsMin\r\n                generalParticipantsMax\r\n                generalEvaluation\r\n                aanbiederEmployeeIds\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"aanbiederId\": \"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieves the completed groups of a provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query completedGroups($aanbiederId: String!){\r\n    completedGroups(aanbiederId: $aanbiederId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                aanbiederId\r\n                groupId\r\n                name\r\n                typeCourse\r\n                outComesGoal\r\n                outComesTopic\r\n                outComesTopicOther\r\n                outComesApplication\r\n                outComesApplicationOther\r\n                outComesLevel\r\n                outComesLevelOther\r\n                detailsIsFormal\r\n                detailsTotalClassHours\r\n                detailsCertificateWillBeAwarded\r\n                detailsStartDate\r\n                detailsEndDate\r\n                availability\r\n                availabilityNotes\r\n                generalLocation\r\n                generalParticipantsMin\r\n                generalParticipantsMax\r\n                generalEvaluation\r\n                aanbiederEmployeeIds\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"aanbiederId\": \"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieves the future groups of a provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query futureGroups($aanbiederId: String!){\r\n    futureGroups(aanbiederId: $aanbiederId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                aanbiederId\r\n                groupId\r\n                name\r\n                typeCourse\r\n                outComesGoal\r\n                outComesTopic\r\n                outComesTopicOther\r\n                outComesApplication\r\n                outComesApplicationOther\r\n                outComesLevel\r\n                outComesLevelOther\r\n                detailsIsFormal\r\n                detailsTotalClassHours\r\n                detailsCertificateWillBeAwarded\r\n                detailsStartDate\r\n                detailsEndDate\r\n                availability\r\n                availabilityNotes\r\n                generalLocation\r\n                generalParticipantsMin\r\n                generalParticipantsMax\r\n                generalEvaluation\r\n                aanbiederEmployeeIds\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"aanbiederId\": \"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updates teachers of a Group ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation changeTeachersOfTheGroup($input: changeTeachersOfTheGroupInput!) {\r\n    changeTeachersOfTheGroup(input: $input) {\r\n        group {\r\n            id\r\n            aanbiederEmployeeIds\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{group}}\",\r\n        \"aanbiederEmployeeIds\":[\r\n            \"{{employee}}\"\r\n        ]\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "student",
					"item": [
						{
							"name": "Retrieves the Student resources of a languageHouse.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query students($languageHouseId: String!) {\r\n    students(first: 10, languageHouseId: $languageHouseId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"languageHouseId\":\"{{language_house}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the completed Student resources of a provider.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query completedStudents($providerId: String!) {\r\n    completedStudents(first: 10, providerId: $providerId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\":\"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a Student resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"student\", jsonData.data.createStudent.student.id.split('/')[2]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createStudent($input: createStudentInput!) {\r\n    createStudent(input: $input) {\r\n        student {\r\n            id\r\n            dateCreated\r\n            status\r\n            memo\r\n            registrar\r\n            civicIntegrationDetails\r\n            personDetails\r\n            contactDetails\r\n            generalDetails\r\n            referrerDetails\r\n            backgroundDetails\r\n            dutchNTDetails\r\n            speakingLevel\r\n            educationDetails\r\n            courseDetails\r\n            jobDetails\r\n            motivationDetails\r\n            availabilityDetails\r\n            readingTestResult\r\n            writingTestResult\r\n            permissionDetails\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"languageHouseId\":\"{{language_house}}\",\r\n        \"civicIntegrationDetails\": {\r\n            \"civicIntegrationRequirement\": \"YES\",\r\n            \"civicIntegrationRequirementReason\": \"FROM_EU_COUNTRY\",\r\n            \"civicIntegrationRequirementFinishDate\": \"23-04-2021\"\r\n        }, \r\n        \"personDetails\": {\r\n            \"givenName\": \"John\",\r\n            \"additionalName\": \"Da\",\r\n            \"familyName\": \"Doe\",\r\n            \"gender\": \"Male\",\r\n            \"dateOfBirth\": \"01-01-1970\"\r\n        },\r\n        \"contactDetails\": {\r\n            \"street\": \"randomstreet\",\r\n            \"postalCode\": \"1234 AB\",\r\n            \"locality\": \"Amsterdam\",\r\n            \"houseNumber\": \"1\",\r\n            \"houseNumberSuffix\": \"A\",\r\n            \"email\": \"johndoe@{{language_house}}test.com\",\r\n            \"telephone\": \"06 12345678\",\r\n            \"contactPersonTelephone\": \"06 12345678\",\r\n            \"contactPreference\": \"PHONECALL\",\r\n            \"contactPreferenceOther\": \"FACEBOOK\"\r\n        },\r\n        \"generalDetails\": {\r\n            \"countryOfOrigin\": \"The Netherlands\",\r\n            \"nativeLanguage\": \"NL\",\r\n            \"otherLanguages\": \"English, Spanish\",\r\n            \"familyComposition\": \"MARRIED_PARTNER\",\r\n            \"childrenCount\": 2,\r\n            \"childrenDatesOfBirth\": \"01-01-2006\"\r\n        },\r\n        \"referrerDetails\": {\r\n            \"referringOrganization\": \"UWV\",\r\n            \"referringOrganizationOther\": \"SOCIAL_SERVICE\",\r\n            \"email\": \"johndoe2@test.com\"\r\n        },\r\n        \"backgroundDetails\": {\r\n            \"foundVia\": \"LIBRARY_WEBSITE\",\r\n            \"foundViaOther\": \"Advertentie\",\r\n            \"wentToTaalhuisBefore\": true,\r\n            \"wentToTaalhuisBeforeReason\": \"leren\",\r\n            \"wentToTaalhuisBeforeYear\": 2021,\r\n            \"network\": [\"HOUSEHOLD_MEMBERS\", \"NEIGHBORS\"],\r\n            \"participationLadder\": 4\r\n        },\r\n        \"dutchNTDetails\": {\r\n            \"dutchNTLevel\": \"NT1\",\r\n            \"inNetherlandsSinceYear\": 2016,\r\n            \"languageInDailyLife\": \"Dutch\",\r\n            \"knowsLatinAlphabet\": true,\r\n            \"lastKnownLevel\": \"A0\"\r\n        },\r\n        \"speakingLevel\": \"ADVANCED\",\r\n        \"educationDetails\": {\r\n            \"lastFollowedEducation\": \"MBO\",\r\n            \"didGraduate\": true,\r\n            \"followingEducationRightNow\": \"YES\",\r\n            \"followingEducationRightNowYesStartDate\": \"01-01-2010\",\r\n            \"followingEducationRightNowYesEndDate\": \"01-12-2010\",\r\n            \"followingEducationRightNowYesLevel\": \"HBO\",\r\n            \"followingEducationRightNowYesInstitute\": \"Random Dutch school\",\r\n            \"followingEducationRightNowYesProvidesCertificate\": false,\r\n            \"followingEducationRightNowNoEndDate\": \"01-12-2014\",\r\n            \"followingEducationRightNowNoLevel\": \"MBO\",\r\n            \"followingEducationRightNowNoGotCertificate\": true\r\n        },\r\n        \"courseDetails\": {\r\n            \"isFollowingCourseRightNow\": true,\r\n            \"courseName\": \"The best course\",\r\n            \"courseTeacher\": \"PROFESSIONAL\",\r\n            \"courseGroup\": \"INDIVIDUALLY\",\r\n            \"amountOfHours\": 24,\r\n            \"doesCourseProvideCertificate\": true\r\n        },\r\n        \"jobDetails\": {\r\n            \"trainedForJob\": \"Software Engineer\",\r\n            \"lastJob\": \"Software Engineer\",\r\n            \"dayTimeActivities\": [\"SCHOOL\", \"SEARCHING_FOR_JOB\"],\r\n            \"dayTimeActivitiesOther\": \"INTERNSHIP\"\r\n        },\r\n        \"motivationDetails\": {\r\n            \"desiredSkills\": [\"USING_WHATSAPP\", \"DEVICE_FUNCTIONALITIES\"],\r\n            \"desiredSkillsOther\": \"USING_FACEBOOK\",\r\n            \"hasTriedThisBefore\": true,\r\n            \"hasTriedThisBeforeExplanation\": \"YES\",\r\n            \"whyWantTheseSkills\": \"Verbeteren\",\r\n            \"whyWantThisNow\": \"Hoe sneller hoe beter\",\r\n            \"desiredLearningMethod\": [\"ONLINE\"],\r\n            \"remarks\": \"stringetje\"\r\n        },\r\n        \"availabilityDetails\": {\r\n            \"availability\": {\r\n                \"monday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"tuesday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"wednesday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"thursday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"friday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"saturday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                },\r\n                \"sunday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                }\r\n            },\r\n            \"availabilityNotes\": \"stringetje\"\r\n        },\r\n        \"readingTestResult\": \"B2\",\r\n        \"writingTestResult\": \"WRITE_NAW_DETAILS\",\r\n        \"permissionDetails\": { \r\n            \"didSignPermissionForm\": true,\r\n            \"hasPermissionToShareDataWithAanbieders\": false,\r\n            \"hasPermissionToShareDataWithLibraries\": false,\r\n            \"hasPermissionToSendInformationAboutLibraries\": false\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a Student resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateStudent($input: updateStudentInput!) {\r\n    updateStudent(input: $input) {\r\n        student {\r\n            id\r\n            dateCreated\r\n            status\r\n            memo\r\n            registrar\r\n            civicIntegrationDetails\r\n            personDetails\r\n            contactDetails\r\n            generalDetails\r\n            referrerDetails\r\n            backgroundDetails\r\n            dutchNTDetails\r\n            speakingLevel\r\n            educationDetails\r\n            courseDetails\r\n            jobDetails\r\n            motivationDetails\r\n            availabilityDetails\r\n            readingTestResult\r\n            writingTestResult\r\n            permissionDetails\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{student}}\",\r\n        \"civicIntegrationDetails\": {\r\n            \"civicIntegrationRequirement\": \"NO\",\r\n            \"civicIntegrationRequirementReason\": \"FINISHED\",\r\n            \"civicIntegrationRequirementFinishDate\": \"24-04-2021\"\r\n        }, \r\n        \"personDetails\": {\r\n            \"givenName\": \"John3\",\r\n            \"additionalName\": \"Da\",\r\n            \"familyName\": \"Doe2\",\r\n            \"gender\": \"Male\",\r\n            \"dateOfBirth\": \"01-01-1976\"\r\n        },\r\n        \"contactDetails\": {\r\n            \"street\": \"randomstreets\",\r\n            \"postalCode\": \"9876 ZZ\",\r\n            \"locality\": \"Utrecht\",\r\n            \"houseNumber\": \"99\",\r\n            \"houseNumberSuffix\": \"X\",\r\n            \"telephone\": \"06 87654321\",\r\n            \"contactPersonTelephone\": \"06 87654321\",\r\n            \"contactPreference\": \"WHATSAPP\",\r\n            \"contactPreferenceOther\": \"FACEBOOK\"\r\n        },\r\n        \"generalDetails\": {\r\n            \"countryOfOrigin\": \"Germany\",\r\n            \"nativeLanguage\": \"EN\",\r\n            \"otherLanguages\": \"Dutch\",\r\n            \"familyComposition\": \"SINGLE\",\r\n            \"childrenCount\": 4,\r\n            \"childrenDatesOfBirth\": \"01-01-2006, 02-01-2006, 03-01-2006\"\r\n        },\r\n        \"referrerDetails\": {\r\n            \"referringOrganization\": \"WELFARE_WORK\",\r\n            \"referringOrganizationOther\": \"LANGUAGE_PROVIDER\",\r\n            \"email\": \"johndoe21235@test.com\"\r\n        },\r\n        \"backgroundDetails\": {\r\n            \"foundVia\": \"NEWSPAPER\",\r\n            \"foundViaOther\": \"Advertentie\",\r\n            \"wentToTaalhuisBefore\": false,\r\n            \"wentToTaalhuisBeforeReason\": \"leren\",\r\n            \"wentToTaalhuisBeforeYear\": 2019,\r\n            \"network\": [\"HOUSEHOLD_MEMBERS\", \"NEIGHBORS\"],\r\n            \"participationLadder\": 3\r\n        },\r\n        \"dutchNTDetails\": {\r\n            \"dutchNTLevel\": \"NT3\",\r\n            \"inNetherlandsSinceYear\": 2000,\r\n            \"languageInDailyLife\": \"English\",\r\n            \"knowsLatinAlphabet\": false,\r\n            \"lastKnownLevel\": \"A1\"\r\n        },\r\n        \"speakingLevel\": \"REASONABLE\",\r\n        \"educationDetails\": {\r\n            \"lastFollowedEducation\": \"HBO\",\r\n            \"didGraduate\": false,\r\n            \"followingEducationRightNow\": \"NO\",\r\n            \"followingEducationRightNowYesStartDate\": \"01-01-2010\",\r\n            \"followingEducationRightNowYesEndDate\": \"01-12-2010\",\r\n            \"followingEducationRightNowYesLevel\": \"HBO\",\r\n            \"followingEducationRightNowYesInstitute\": \"Random Dutch school\",\r\n            \"followingEducationRightNowYesProvidesCertificate\": false,\r\n            \"followingEducationRightNowNoEndDate\": \"01-12-2014\",\r\n            \"followingEducationRightNowNoLevel\": \"MBO\",\r\n            \"followingEducationRightNowNoGotCertificate\": true\r\n        },\r\n        \"courseDetails\": {\r\n            \"isFollowingCourseRightNow\": true,\r\n            \"courseName\": \"The best course ofcourse\",\r\n            \"courseTeacher\": \"PROFESSIONAL\",\r\n            \"courseGroup\": \"INDIVIDUALLY\",\r\n            \"amountOfHours\": 30,\r\n            \"doesCourseProvideCertificate\": false\r\n        },\r\n        \"jobDetails\": {\r\n            \"trainedForJob\": \"Software Engineer2\",\r\n            \"lastJob\": \"Software Engineer2\",\r\n            \"dayTimeActivities\": [\"SCHOOL\"],\r\n            \"dayTimeActivitiesOther\": \"INTERNSHIP\"\r\n        },\r\n        \"motivationDetails\": {\r\n            \"desiredSkills\": [\"USING_WHATSAPP\"],\r\n            \"desiredSkillsOther\": \"USING_FACEBOOK\",\r\n            \"hasTriedThisBefore\": false,\r\n            \"hasTriedThisBeforeExplanation\": \"YES\",\r\n            \"whyWantTheseskills\": \"Verbeteren\",\r\n            \"whyWantThisNow\": \"Hoe sneller hoe beter\",\r\n            \"desiredLearningMethod\": [\"ONLINE\", \"HOME_ENVIRONMENT\"],\r\n            \"remarks\": \"stringetjeasdf\"\r\n        },\r\n        \"availabilityDetails\": {\r\n            \"availability\": {\r\n                \"monday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                },\r\n                \"tuesday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                },\r\n                \"wednesday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"thursday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"friday\": {\r\n                    \"morning\": true,\r\n                    \"afternoon\": true,\r\n                    \"evening\": false\r\n                },\r\n                \"saturday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                },\r\n                \"sunday\": {\r\n                    \"morning\": false,\r\n                    \"afternoon\": false,\r\n                    \"evening\": false\r\n                }\r\n            },\r\n            \"availabilityNotes\": \"stringetjeafsdfsadf\"\r\n        },\r\n        \"readingTestResult\": \"B1\",\r\n        \"writingTestResult\": \"WRITE_NAW_DETAILS\",\r\n        \"permissionDetails\": { \r\n            \"didSignPermissionForm\": true,\r\n            \"hasPermissionToShareDataWithAanbieders\": true,\r\n            \"hasPermissionToShareDataWithLibraries\": true,\r\n            \"hasPermissionToSendInformationAboutLibraries\": false\r\n        }\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a Student resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query student($studentId: ID!) {\r\n    student(id: $studentId) {\r\n        id\r\n        dateCreated\r\n        status\r\n        memo\r\n        registrar\r\n        civicIntegrationDetails\r\n        personDetails\r\n        contactDetails\r\n        generalDetails\r\n        referrerDetails\r\n        backgroundDetails\r\n        dutchNTDetails\r\n        speakingLevel\r\n        educationDetails\r\n        courseDetails\r\n        jobDetails\r\n        motivationDetails\r\n        availabilityDetails\r\n        readingTestResult\r\n        writingTestResult\r\n        permissionDetails\r\n    }\r\n}",
										"variables": "{\r\n    \"studentId\":\"{{student}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the Mentees/Student resources of a mentor.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query aanbiederEmployeeMenteesStudents($aanbiederEmployeeId: String!) {\r\n    aanbiederEmployeeMenteesStudents(first: 10, aanbiederEmployeeId: $aanbiederEmployeeId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"aanbiederEmployeeId\":\"{{employee}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the Student resources of a group.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query groupStudents($groupId: String!) {\r\n    groupStudents(first: 10, groupId: $groupId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"groupId\":\"{{group}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the newReffered Student resources of a provider.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query newRefferedStudents($providerId: String!) {\r\n    newRefferedStudents(first: 10, providerId: $providerId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\":\"{{provider}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the active Student resources of a provider.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query activeStudents($providerId: String!) {\r\n    activeStudents(first: 10, providerId: $providerId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"providerId\":\"/providers/e521c924-94f6-4cb4-9cf9-091ec1a4580b\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "learning needs",
					"item": [
						{
							"name": "Retrieves the LearningNeeds resources of a student.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query learningNeeds($studentId: String!) {\r\n    learningNeeds(first: 10, studentId: $studentId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                learningNeedDescription\r\n                learningNeedMotivation\r\n                desiredOutComesGoal\r\n                desiredOutComesTopic\r\n                desiredOutComesTopicOther\r\n                desiredOutComesApplication\r\n                desiredOutComesApplicationOther\r\n                desiredOutComesLevel\r\n                desiredOutComesLevelOther\r\n                offerDesiredOffer\r\n                offerAdvisedOffer\r\n                offerDifference\r\n                offerDifferenceOther\r\n                offerEngagements\r\n                participations\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"studentId\":\"aa972f2f-731d-4c18-aaa9-c6d1b6fb1e2c\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a LearningNeed resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"learning_need\", jsonData.data.createLearningNeed.learningNeed.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createLearningNeed($input: createLearningNeedInput!) {\r\n    createLearningNeed(input: $input) {\r\n        learningNeed {\r\n            id\r\n            learningNeedDescription\r\n            learningNeedMotivation\r\n            desiredOutComesGoal\r\n            desiredOutComesTopic\r\n            desiredOutComesTopicOther\r\n            desiredOutComesApplication\r\n            desiredOutComesApplicationOther\r\n            desiredOutComesLevel\r\n            desiredOutComesLevelOther\r\n            offerDesiredOffer\r\n            offerAdvisedOffer\r\n            offerDifference\r\n            offerDifferenceOther\r\n            offerEngagements\r\n            participations\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"studentId\":\"{{student}}\",\r\n        \"learningNeedDescription\": \"test\",\r\n        \"learningNeedMotivation\": \"test\",\r\n        \"desiredOutComesGoal\": \"test\",\r\n        \"desiredOutComesTopic\": \"OTHER\",\r\n        \"desiredOutComesTopicOther\": \"test\",\r\n        \"desiredOutComesApplication\": \"OTHER\",\r\n        \"desiredOutComesApplicationOther\": \"test\",\r\n        \"desiredOutComesLevel\": \"OTHER\",\r\n        \"desiredOutComesLevelOther\": \"test\",\r\n        \"offerDesiredOffer\": \"test\",\r\n        \"offerAdvisedOffer\": \"test\",\r\n        \"offerDifference\": \"YES_OTHER\",\r\n        \"offerDifferenceOther\": \"test\",\r\n        \"offerEngagements\": \"string\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a LearningNeed resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateLearningNeed($input: updateLearningNeedInput!) {\r\n    updateLearningNeed(input: $input) {\r\n        learningNeed {\r\n            id\r\n            learningNeedDescription\r\n            learningNeedMotivation\r\n            desiredOutComesGoal\r\n            desiredOutComesTopic\r\n            desiredOutComesTopicOther\r\n            desiredOutComesApplication\r\n            desiredOutComesApplicationOther\r\n            desiredOutComesLevel\r\n            desiredOutComesLevelOther\r\n            offerDesiredOffer\r\n            offerAdvisedOffer\r\n            offerDifference\r\n            offerDifferenceOther\r\n            offerEngagements\r\n            participations\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{learning_need}}\",\r\n        \"learningNeedDescription\": \"test\",\r\n        \"learningNeedMotivation\": \"test\",\r\n        \"desiredOutComesGoal\": \"test\",\r\n        \"desiredOutComesTopic\": \"OTHER\",\r\n        \"desiredOutComesTopicOther\": \"test\",\r\n        \"desiredOutComesApplication\": \"OTHER\",\r\n        \"desiredOutComesApplicationOther\": \"test\",\r\n        \"desiredOutComesLevel\": \"OTHER\",\r\n        \"desiredOutComesLevelOther\": \"test\",\r\n        \"offerDesiredOffer\": \"test\",\r\n        \"offerAdvisedOffer\": \"test\",\r\n        \"offerDifference\": \"YES_OTHER\",\r\n        \"offerDifferenceOther\": \"test\",\r\n        \"offerEngagements\": \"string2\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a LearningNeed resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query learningNeed($learningNeedId: ID!) {\r\n    learningNeed(id: $learningNeedId) {\r\n        id\r\n        learningNeedDescription\r\n        learningNeedMotivation\r\n        desiredOutComesGoal\r\n        desiredOutComesTopic\r\n        desiredOutComesTopicOther\r\n        desiredOutComesApplication\r\n        desiredOutComesApplicationOther\r\n        desiredOutComesLevel\r\n        desiredOutComesLevelOther\r\n        offerDesiredOffer\r\n        offerAdvisedOffer\r\n        offerDifference\r\n        offerDifferenceOther\r\n        offerEngagements\r\n        participations\r\n    }\r\n}",
										"variables": "{\r\n    \"learningNeedId\": \"{{learning_need}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "participations",
					"item": [
						{
							"name": "Retrieves the Participation resources of a learningNeed.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query participations($learningNeedId: String!) {\r\n    participations(first: 10, learningNeedId: $learningNeedId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                status\r\n                aanbiederId\r\n                aanbiederName\r\n                aanbiederNote\r\n                offerName\r\n                offerCourse\r\n                outComesGoal\r\n                outComesTopic\r\n                outComesTopicOther\r\n                outComesApplication\r\n                outComesApplicationOther\r\n                outComesLevel\r\n                outComesLevelOther\r\n                detailsIsFormal\r\n                detailsGroupFormation\r\n                detailsTotalClassHours\r\n                detailsCertificateWillBeAwarded\r\n                detailsStartDate\r\n                detailsEndDate\r\n                detailsEngagements\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"learningNeedId\":\"/learning_needs/{{learning_need}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"participation\", jsonData.data.createParticipation.participation.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createParticipation($input: createParticipationInput!) {\r\n    createParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"aanbiederId\":\"{{provider}}\",\r\n        \"aanbiederNote\":\"test\",\r\n        \"offerName\":\"test\",\r\n        \"offerCourse\":\"LANGUAGE\",\r\n        \"outComesGoal\":\"test\",\r\n        \"outComesTopic\":\"OTHER\",\r\n        \"outComesTopicOther\":\"test\",\r\n        \"outComesApplication\":\"OTHER\",\r\n        \"outComesApplicationOther\":\"test\",\r\n        \"outComesLevel\":\"OTHER\",\r\n        \"outComesLevelOther\":\"test\",\r\n        \"detailsIsFormal\":true,\r\n        \"detailsGroupFormation\":\"INDIVIDUALLY\",\r\n        \"detailsTotalClassHours\":30.2,\r\n        \"detailsCertificateWillBeAwarded\":false,\r\n        \"detailsStartDate\":\"1-1-2021 12:00:00\",\r\n        \"detailsEndDate\":\"30-11-2021 20:00:00\",\r\n        \"detailsEngagements\":\"test\",\r\n        \"learningNeedId\":\"{{learning_need}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateParticipation($input: updateParticipationInput!) {\r\n    updateParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{participation}}\",\r\n        \"aanbiederId\":\"{{provider}}\",\r\n        \"aanbiederNote\":\"test123\",\r\n        \"offerName\":\"test123\",\r\n        \"offerCourse\":\"LANGUAGE\",\r\n        \"outComesGoal\":\"test123\",\r\n        \"outComesTopic\":\"OTHER\",\r\n        \"outComesTopicOther\":\"test123\",\r\n        \"outComesApplication\":\"OTHER\",\r\n        \"outComesApplicationOther\":\"test123\",\r\n        \"outComesLevel\":\"OTHER\",\r\n        \"outComesLevelOther\":\"test123\",\r\n        \"detailsIsFormal\":true,\r\n        \"detailsGroupFormation\":\"INDIVIDUALLY\",\r\n        \"detailsTotalClassHours\":30.2,\r\n        \"detailsCertificateWillBeAwarded\":false,\r\n        \"detailsStartDate\":\"1-1-2021 12:00:00\",\r\n        \"detailsEndDate\":\"30-11-2021 20:00:00\",\r\n        \"detailsEngagements\":\"test123\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query participation($participationId: ID!) {\r\n    participation(id: $participationId) {\r\n        id\r\n        status\r\n        aanbiederId\r\n        aanbiederName\r\n        aanbiederNote\r\n        offerName\r\n        offerCourse\r\n        outComesGoal\r\n        outComesTopic\r\n        outComesTopicOther\r\n        outComesApplication\r\n        outComesApplicationOther\r\n        outComesLevel\r\n        outComesLevelOther\r\n        detailsIsFormal\r\n        detailsGroupFormation\r\n        detailsTotalClassHours\r\n        detailsCertificateWillBeAwarded\r\n        detailsStartDate\r\n        detailsEndDate\r\n        detailsEngagements\r\n    }\r\n}",
										"variables": "{\r\n    \"participationId\":\"{{participation}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Add a Group to a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addGroupToParticipation($input: addGroupToParticipationInput!) {\r\n    addGroupToParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"groupId\": \"{{group}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Update a GroupParticipation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateGroupParticipation($input: updateGroupParticipationInput!) {\r\n    updateGroupParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n            presenceEngagements\r\n            presenceStartDate\r\n            presenceEndDate\r\n            presenceEndParticipationReason\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"presenceEngagements\":\"test123\",\r\n        \"presenceStartDate\":\"1-1-2021 12:00:00\",\r\n        \"presenceEndDate\":\"30-1-2021 20:00:00\",\r\n        \"presenceEndParticipationReason\":\"MOVED\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Remove a Group from a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeGroupFromParticipation($input: removeGroupFromParticipationInput!) {\r\n    removeGroupFromParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"groupId\": \"{{group}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Add a Mentor to a Participation to Employee object resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addMentoredParticipationToEmployee($input: addMentoredParticipationToEmployeeInput!) {\r\n    addMentoredParticipationToEmployee(input: $input) {\r\n        employee {\r\n            id\r\n            userId\r\n            dateCreated\r\n            dateModified\r\n            userRoles\r\n            givenName\r\n            additionalName\r\n            familyName\r\n            telephone\r\n            availability\r\n            availabilityNotes\r\n            email\r\n            gender\r\n            dateOfBirth\r\n            address\r\n            contactTelephone\r\n            contactPreference\r\n            contactPreferenceOther\r\n            targetGroupPreferences\r\n            volunteeringPreference\r\n            gotHereVia\r\n            hasExperienceWithTargetGroup\r\n            experienceWithTargetGroupYesReason\r\n            currentEducation\r\n            currentEducationYes\r\n            currentEducationNoButDidFollow\r\n            doesCurrentlyFollowCourse\r\n            currentlyFollowingCourseName\r\n            currentlyFollowingCourseInstitute\r\n            currentlyFollowingCourseTeacherProfessionalism\r\n            currentlyFollowingCourseCourseProfessionalism\r\n            doesCurrentlyFollowingCourseProvideCertificate\r\n            otherRelevantCertificates\r\n            isVOGChecked\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"aanbiederEmployeeId\": \"{{employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Add a Mentor to a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation addMentorToParticipation($input: addMentorToParticipationInput!) {\r\n    addMentorToParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"aanbiederEmployeeId\": \"{{employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a MentorParticipation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateMentorParticipation($input: updateMentorParticipationInput!) {\r\n    updateMentorParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n            presenceEngagements\r\n            presenceStartDate\r\n            presenceEndDate\r\n            presenceEndParticipationReason\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"presenceEngagements\":\"test123\",\r\n        \"presenceStartDate\":\"1-1-2021 12:00:00\",\r\n        \"presenceEndDate\":\"30-1-2021 20:00:00\",\r\n        \"presenceEndParticipationReason\":\"MOVED\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Remove a Mentor from a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeMentorFromParticipation($input: removeMentorFromParticipationInput!) {\r\n    removeMentorFromParticipation(input: $input) {\r\n        participation {\r\n            id\r\n            status\r\n            aanbiederId\r\n            aanbiederName\r\n            aanbiederNote\r\n            offerName\r\n            offerCourse\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            detailsIsFormal\r\n            detailsGroupFormation\r\n            detailsTotalClassHours\r\n            detailsCertificateWillBeAwarded\r\n            detailsStartDate\r\n            detailsEndDate\r\n            detailsEngagements\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\": \"{{participation}}\",\r\n        \"aanbiederEmployeeId\": \"{{employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "studentDossierEvents",
					"item": [
						{
							"name": "Retrieves the StudentDossierEvent resources of a student.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query studentDossierEvents($studentId: String!) {\r\n    studentDossierEvents(first: 10, studentId: $studentId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                eventDate\r\n                eventDescription\r\n                event\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"studentId\":\"{{student}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a StudentDossierEvent resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"student_dossier_event\", jsonData.data.createStudentDossierEvent.studentDossierEvent.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createStudentDossierEvent($input: createStudentDossierEventInput!) {\r\n    createStudentDossierEvent(input: $input) {\r\n        studentDossierEvent {\r\n            id\r\n            eventDate\r\n            eventDescription\r\n            event\r\n            creatorGivenName\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"studentId\":\"{{student}}\",\r\n        \"eventDate\": \"2021-06-20\",\r\n        \"eventDescription\": \"a test dossier event\",\r\n        \"event\": \"INTAKE\",\r\n        \"employeeId\": \"{{employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a StudentDossierEvent resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateStudentDossierEvent($input: updateStudentDossierEventInput!) {\r\n    updateStudentDossierEvent(input: $input) {\r\n        studentDossierEvent {\r\n            id\r\n            eventDate\r\n            eventDescription\r\n            event\r\n            studentId\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{student_dossier_event}}\",\r\n        \"eventDate\": \"2021-04-22\",\r\n        \"event\": \"INTAKE\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a StudentDossierEvent resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query studentDossierEvent($studentDossierEventId: ID!) {\r\n    studentDossierEvent(id: $studentDossierEventId) {\r\n        id\r\n        eventDate\r\n        eventDescription\r\n        event\r\n    }\r\n}",
										"variables": "{\r\n    \"studentDossierEventId\":\"{{student_dossier_event}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a StudentDossierEvent resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeStudentDossierEvent($input: removeStudentDossierEventInput!) {\r\n    removeStudentDossierEvent(input: $input) {\r\n        studentDossierEvent {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{student_dossier_event}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "registration",
					"item": [
						{
							"name": "Retrieves the Registration  resources of a languageHouse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query registrations($languageHouseId: String!) {\r\n    registrations(first: 10, languageHouseId: $languageHouseId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                dateCreated\r\n                status\r\n                memo\r\n                registrar\r\n                civicIntegrationDetails\r\n                personDetails\r\n                contactDetails\r\n                generalDetails\r\n                referrerDetails\r\n                backgroundDetails\r\n                dutchNTDetails\r\n                speakingLevel\r\n                educationDetails\r\n                courseDetails\r\n                jobDetails\r\n                motivationDetails\r\n                availabilityDetails\r\n                readingTestResult\r\n                writingTestResult\r\n                permissionDetails\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"languageHouseId\":\"{{language_house}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a Registration resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"registration\", jsonData.data.createRegistration.registration.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createRegistration($input: createRegistrationInput!) {\r\n    createRegistration(input: $input) {\r\n        registration {\r\n            id\r\n            languageHouseId\r\n            student\r\n            registrar\r\n            studentId\r\n            memo\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"languageHouseId\": \"{{language_house}}\",\r\n        \"student\": {\r\n            \"givenName\": \"naam student\",\r\n            \"additionalName\": \"en\",\r\n            \"familyName\": \"achternaam student\",\r\n            \"email\":\"main+bisc@{{language_house}}conduction.nl\",\r\n            \"telephone\": \"0645678912\",\r\n            \"address\":{\r\n                \"street\": \"vuntudlaan\",\r\n                \"houseNumber\": \"777\",\r\n                \"houseNumberSuffix\": \"a\",\r\n                \"postalCode\":\"1231NR\",\r\n                \"locality\": \"loosdrecht\"\r\n            }\r\n        },\r\n        \"registrar\":{\r\n            \"organizationName\":\"registration\",\r\n            \"givenName\": \"naam registrar\",\r\n            \"additionalName\": \"en\",\r\n            \"familyName\": \"achternaam registrar\",\r\n            \"email\":\"main+bisc@conduction.nll\",\r\n            \"telephone\": \"0645678912\"\r\n        },\r\n        \"memo\":\"toelichting\"\r\n     }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Accept Registration resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation acceptRegistration($input: acceptRegistrationInput!) {\r\n    acceptRegistration(input: $input) {\r\n        registration {\r\n            id\r\n            dateCreated\r\n            status\r\n            memo\r\n            registrar\r\n            civicIntegrationDetails\r\n            personDetails\r\n            contactDetails\r\n            generalDetails\r\n            referrerDetails\r\n            backgroundDetails\r\n            dutchNTDetails\r\n            speakingLevel\r\n            educationDetails\r\n            courseDetails\r\n            jobDetails\r\n            motivationDetails\r\n            availabilityDetails\r\n            readingTestResult\r\n            writingTestResult\r\n            permissionDetails\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{registration}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieves a Registration resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query registration($studentId: ID!) {\r\n    registration(id: $studentId) {\r\n        id\r\n        dateCreated\r\n        status\r\n        memo\r\n        registrar\r\n        civicIntegrationDetails\r\n        personDetails\r\n        contactDetails\r\n        generalDetails\r\n        referrerDetails\r\n        backgroundDetails\r\n        dutchNTDetails\r\n        speakingLevel\r\n        educationDetails\r\n        courseDetails\r\n        jobDetails\r\n        motivationDetails\r\n        availabilityDetails\r\n        readingTestResult\r\n        writingTestResult\r\n        permissionDetails\r\n    }\r\n}",
										"variables": "{\r\n    \"studentId\":\"{{registration}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "[UNUSED] Retrieves all User resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query users {\r\n    users {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges{\r\n            node {\r\n                    id\r\n                    givenName\r\n                    additionalName\r\n                    familyName\r\n                    email\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a User resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"user\", jsonData.data.createUser.user.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createUser($input: createUserInput!){\r\n    createUser(input: $input) {\r\n        user{\r\n            id\r\n            username\r\n            givenName\r\n            familyName\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"username\": \"main+{{provider}}@conduction.nl\",\r\n        \"password\": \"Test1234\",\r\n        \"givenName\": \"Robert\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"email\": \"main+{{provider}}@conduction.nl\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a User resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateUser($input: updateUserInput!){\r\n    updateUser(input: $input) {\r\n        user{\r\n            id\r\n            username\r\n            givenName\r\n            familyName\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{user}}\",\r\n        \"password\": \"Test1234\",\r\n        \"username\": \"main+{{provider}}@conduction.nl\",\r\n        \"givenName\": \"Robert\",\r\n        \"familyName\": \"Zondervan\",\r\n        \"email\": \"main+{{provider}}@conduction.nl\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a User resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query user($userId: ID!) {\r\n    user(id: $userId) {\r\n        id\r\n        givenName\r\n        familyName\r\n        email\r\n    }\r\n}",
										"variables": "{\r\n        \"userId\": \"{{user}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves the current User resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query currentUser {\r\n    currentUser {\r\n        id\r\n        givenName\r\n        familyName\r\n        email\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Request a user password reset",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"user_reset_token\", jsonData.data.requestPasswordResetUser.user.token);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation requestPasswordResetUser($input: requestPasswordResetUserInput!){\r\n    requestPasswordResetUser(input: $input) {\r\n        user{\r\n            id,\r\n            token\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"email\": \"main+{{provider}}@conduction.nl\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Reset a user password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation resetPasswordUser($input: resetPasswordUserInput!){\r\n    resetPasswordUser(input: $input) {\r\n        user{\r\n            id,\r\n            username\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"email\": \"main+{{provider}}@conduction.nl\",\r\n        \"password\": \"Test12345\",\r\n        \"token\": \"{{user_reset_token}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "document",
					"item": [
						{
							"name": "Retrieves the Document resources",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query documents {\r\n    documents(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creates a Document resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"document\", jsonData.data.createDocument.document.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createDocument($input: createDocumentInput!){\r\n    createDocument(input: $input) {\r\n        document{\r\n            id\r\n            filename\r\n            dateCreated\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"studentId\": \"{{student}}\",\r\n        \"filename\": \"test.txt\",\r\n        \"base64data\": \"dGVzdGVyZGV0ZXN0dGVzdA==\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download a Document resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation downloadDocument($input: downloadDocumentInput!){\r\n    downloadDocument(input: $input) {\r\n        document{\r\n            id,\r\n            filename\r\n            base64data\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"studentDocumentId\": \"{{document}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieves a Document resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query document($studentDocumentId: ID!) {\r\n    document(id: $studentDocumentId) {\r\n        studentDocumentId\r\n        studentId\r\n        filename\r\n        dateCreated\r\n    }\r\n}",
										"variables": "{\r\n    \"studentDocumentId\": \"{{document}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Deletes a Document resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeDocument($input: removeDocumentInput!) {\r\n    removeDocument(input: $input) {\r\n        document {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"studentDocumentId\": \"{{document}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "testResults",
					"item": [
						{
							"name": "Retrieves the TestResults resources of a participation.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query testResults($participationId: String!) {\r\n    testResults(first: 10, participationId: $participationId) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                outComesGoal\r\n                outComesTopic\r\n                outComesTopicOther\r\n                outComesApplication\r\n                outComesApplicationOther\r\n                outComesLevel\r\n                outComesLevelOther\r\n                examUsedExam\r\n                examDate\r\n                examMemo\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"participationId\":\"/participations/{{participation}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Creates a TestResult resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});\r",
											"\r",
											"pm.test(\"Set ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.environment.set(\"test_result\", jsonData.data.createTestResult.testResult.id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation createTestResult($input: createTestResultInput!) {\r\n    createTestResult(input: $input) {\r\n        testResult {\r\n            id\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            examUsedExam\r\n            examDate\r\n            examMemo\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"participationId\":\"{{participation}}\",\r\n        \"outComesGoal\": \"test\",\r\n        \"outComesTopic\": \"OTHER\",\r\n        \"outComesTopicOther\": \"test\",\r\n        \"outComesApplication\": \"OTHER\",\r\n        \"outComesApplicationOther\": \"test\",\r\n        \"outComesLevel\": \"OTHER\",\r\n        \"outComesLevelOther\": \"test\",\r\n        \"examUsedExam\":\"toets123\",\r\n        \"examDate\":\"30-11-2021 20:00:00\",\r\n        \"examMemo\":\"Het was erg moeilijk!\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Updates a TestResult resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation updateTestResult($input: updateTestResultInput!) {\r\n    updateTestResult(input: $input) {\r\n        testResult {\r\n            id\r\n            outComesGoal\r\n            outComesTopic\r\n            outComesTopicOther\r\n            outComesApplication\r\n            outComesApplicationOther\r\n            outComesLevel\r\n            outComesLevelOther\r\n            examUsedExam\r\n            examDate\r\n            examMemo\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{test_result}}\",\r\n        \"outComesGoal\": \"test2\",\r\n        \"outComesTopic\": \"OTHER\",\r\n        \"outComesTopicOther\": \"test2\",\r\n        \"outComesApplication\": \"OTHER\",\r\n        \"outComesApplicationOther\": \"test2\",\r\n        \"outComesLevel\": \"NLQF2\",\r\n        \"examUsedExam\":\"toets321\",\r\n        \"examDate\":\"30-11-2021 20:00:00\",\r\n        \"examMemo\":\"Het was erg makkelijk!\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Retrieves a TestResult resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query testResult($testResultId: ID!) {\r\n    testResult(id: $testResultId) {\r\n        id\r\n        outComesGoal\r\n        outComesTopic\r\n        outComesTopicOther\r\n        outComesApplication\r\n        outComesApplicationOther\r\n        outComesLevel\r\n        outComesLevelOther\r\n        examUsedExam\r\n        examDate\r\n        examMemo\r\n    }\r\n}",
										"variables": "{\r\n    \"testResultId\":\"{{test_result}}\"\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a TestResult resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeTestResult($input: removeTestResultInput!) {\r\n    removeTestResult(input: $input) {\r\n        testResult {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{test_result}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "reports",
					"item": [
						{
							"name": "Download a LearningNeeds Report.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation downloadDesiredLearningOutcomesReport($input: downloadDesiredLearningOutcomesReportInput!){\r\n    downloadDesiredLearningOutcomesReport(input: $input) {\r\n        report{\r\n            filename,\r\n            base64data\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"languageHouseId\": \"{{language_house}}\",\r\n        \"dateFrom\":\"5-5-2021 20:00:00\",\r\n        \"dateUntil\":\"30-11-2021 20:00:00\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download a Participants Report resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation downloadParticipantsReport($input: downloadParticipantsReportInput!){\r\n    downloadParticipantsReport(input: $input) {\r\n        report{\r\n            filename,\r\n            base64data\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"languageHouseId\": \"{{language_house}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download a Volunteers Report resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation downloadVolunteersReport($input: downloadVolunteersReportInput!){\r\n    downloadVolunteersReport(input: $input) {\r\n        report{\r\n            filename,\r\n            base64data\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"providerId\": \"{{provider}}\",\r\n        \"dateFrom\":\"5-5-2021 20:00:00\",\r\n        \"dateUntil\":\"30-11-2021 20:00:00\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "Removes a User resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeUser($input: removeUserInput!) {\r\n    removeUser(input: $input) {\r\n        user {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{user}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a Registration resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeRegistration($input: removeRegistrationInput!) {\r\n    removeRegistration(input: $input) {\r\n        registration {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{registration}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a Participation resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeParticipation($input: removeParticipationInput!) {\r\n    removeParticipation(input: $input) {\r\n        participation {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{participation}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a LearningNeed resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeLearningNeed($input: removeLearningNeedInput!) {\r\n    removeLearningNeed(input: $input) {\r\n        learningNeed {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{learning_need}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "[UNUSED] Removes a Student resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeStudent($input: removeStudentInput!) {\r\n    removeStudent(input: $input) {\r\n        student {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{student}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a Group resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeGroup($input: removeGroupInput!) {\r\n    removeGroup(input: $input) {\r\n        group {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{group}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Removes a Provider Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeEmployee($input: removeEmployeeInput!) {\r\n    removeEmployee(input: $input) {\r\n        employee {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a LanguageHouse Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeEmployee($input: removeEmployeeInput!) {\r\n    removeEmployee(input: $input) {\r\n        employee {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{language_house_employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a BiSC Employee resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeEmployee($input: removeEmployeeInput!) {\r\n    removeEmployee(input: $input) {\r\n        employee {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{bisc_employee}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "Removes a Provider resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeProvider($input: removeProviderInput!) {\r\n    removeProvider(input: $input) {\r\n        provider {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\":\"{{provider}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Removes a LanguageHouse resource.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeLanguageHouse($input: removeLanguageHouseInput!) {\r\n    removeLanguageHouse(input: $input) {\r\n        languageHouse {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{language_house}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "Logs out the user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// example using pm.response.to.have\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// example using response assertions\r",
											"pm.test(\"response should be okay to process\", function () {\r",
											"    pm.response.to.not.be.error;\r",
											"    pm.response.to.not.have.jsonBody(\"error\");\r",
											"    pm.response.to.not.have.jsonBody(\"errors\");\r",
											"});\r",
											"\r",
											"// example using pm.response.to.be*\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"    // assert that the status code is 200\r",
											"    // pm.response.to.be.created; // info, success, redirection, clientError,  serverError, are other variants\r",
											"    // assert that the response has a valid JSON body\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation removeUser($input: removeUserInput!) {\r\n    removeUser(input: $input) {\r\n        user {\r\n            id\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"input\": {\r\n        \"id\": \"{{user}}\"\r\n    }\r\n}"
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								}
							]
						},
						{
							"name": "[UNUSED] Retrieves the Provider resources with an invalidated token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Needs tests as soon as this is a working call!"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "The JWT of the entity performing the request"
									},
									{
										"key": "API-Version",
										"value": "",
										"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
									},
									{
										"key": "X-NLX-Logrecord-ID",
										"value": "",
										"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
									},
									{
										"key": "X-NLX-Request-Process-Id",
										"value": "",
										"description": "A process id for purpose registration (doelbinding)"
									},
									{
										"key": "X-NLX-Request-Data-Elements",
										"value": "",
										"description": "A list of requested data elements"
									},
									{
										"key": "X-NLX-Request-Data-Subject",
										"value": "",
										"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
									},
									{
										"key": "X-NLX-Audit-Clarification",
										"value": "",
										"description": "A clarification as to why a request has been made  (doelbinding)"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query providers {\r\n    providers(first: 10) {\r\n        totalCount\r\n        pageInfo {\r\n            startCursor\r\n            endCursor\r\n            hasNextPage\r\n        }\r\n        edges {\r\n            node {\r\n                id\r\n                name\r\n                email\r\n                phoneNumber\r\n                address\r\n                type\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{baseUrl}}/graphql",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": [
								{
									"name": "Resource not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Challenge resource created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/ld+json"
										}
									],
									"cookie": [],
									"body": "{\n \"name\": \"<string>\",\n \"@context\": \"<string>\",\n \"@id\": \"<string>\",\n \"@type\": \"<string>\",\n \"id\": \"<string>\",\n \"description\": \"<string>\",\n \"catchPhrase\": \"<string>\",\n \"dateClose\": \"<dateTime>\",\n \"dateCreated\": \"<dateTime>\",\n \"dateModified\": \"<dateTime>\",\n \"submitters\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"pitches\": [\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  },\n  {\n   \"name\": \"<string>\",\n   \"@context\": \"<string>\",\n   \"@id\": \"<string>\",\n   \"@type\": \"<string>\",\n   \"id\": \"<string>\",\n   \"description\": \"<string>\",\n   \"dateSubmitted\": \"<dateTime>\",\n   \"dateCreated\": \"<dateTime>\",\n   \"dateModified\": \"<dateTime>\",\n   \"challenge\": {\n    \"value\": \"<Circular reference to #/components/schemas/Challenge:jsonld-read detected>\"\n   }\n  }\n ]\n}"
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "The JWT of the entity performing the request"
											},
											{
												"key": "API-Version",
												"value": "",
												"description": "The version of the API conform [Landelijke API-strategie.](https://geonovum.github.io/KP-APIs/#versioning)"
											},
											{
												"key": "X-NLX-Logrecord-ID",
												"value": "",
												"description": "A  globally unique id of the request, which makes a request traceable throughout the network."
											},
											{
												"key": "X-NLX-Request-Process-Id",
												"value": "",
												"description": "A process id for purpose registration (doelbinding)"
											},
											{
												"key": "X-NLX-Request-Data-Elements",
												"value": "",
												"description": "A list of requested data elements"
											},
											{
												"key": "X-NLX-Request-Data-Subject",
												"value": "",
												"description": "A key-value list of data subjects related to this request. e.g. `bsn=12345678, kenteken=ab-12-fg`"
											},
											{
												"key": "X-NLX-Audit-Clarification",
												"value": "",
												"description": "A clarification as to why a request has been made  (doelbinding)"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"catchPhrase\": \"<string>\",\n    \"dateClose\": \"<dateTime>\",\n    \"submitters\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"pitches\": [\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"name\": \"<string>\",\n            \"description\": \"<string>\",\n            \"dateSubmitted\": \"<dateTime>\",\n            \"challenge\": {\n                \"name\": \"<string>\",\n                \"description\": \"<string>\",\n                \"catchPhrase\": \"<string>\",\n                \"dateClose\": \"<dateTime>\",\n                \"submitters\": [\n                    \"<string>\",\n                    \"<string>\"\n                ],\n                \"pitches\": [\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    },\n                    {\n                        \"value\": \"<Circular reference to #/components/schemas/Pitch-write detected>\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/challenges",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"challenges"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_login_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost",
			"disabled": true
		},
		{
			"key": "authorization",
			"value": "8b55691f-346d-423c-bdcf-3f5365806d39"
		},
		{
			"key": "baseUrl",
			"value": "localhost"
		},
		{
			"value": ""
		}
	]
}
